
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

/**
 *
 * @author Acer
 */
public class busInformation extends javax.swing.JInternalFrame {
    private DefaultTableModel originalModel;
    /**
     * Creates new form busInformation
     */
    public busInformation() {
        initComponents();
        displayBusInformation();
    }
    private void displayBusInformation() {
        originalModel = (DefaultTableModel) jTable1.getModel();
        originalModel.setRowCount(0);

        try{
            File file = new File("busInformation.txt");
            FileReader fileReader = new FileReader(file);
            Scanner reader = new Scanner(fileReader);
            String line = reader.nextLine();
            while (reader.hasNextLine()) {
                String[] data = line.split("\\*");
                originalModel.addRow(data);
            }
        } catch (FileNotFoundException e) {
            System.out.println(e);
        }
    }
    private void resetTable() {
        jTable1.setModel(originalModel);
    }
    private void updateFile() {
    try{
        File file = new File("busInformation.txt");
        FileWriter writer = new FileWriter(file, false);
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int row = 0; row < model.getRowCount(); row++) {
            for (int col = 0; col < model.getColumnCount(); col++) {
                writer.write(model.getValueAt(row, col).toString());
                if (col < model.getColumnCount() - 1) {
                    writer.write("*");
                }
            }
            writer.write(System.lineSeparator());
        }
    } catch (IOException e) {
        System.out.println(e);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        searchTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        deleteBTN = new javax.swing.JButton();
        editBTN = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(0, 0, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Bus Information Management");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        searchTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchTFKeyTyped(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Bus Unit Number", "Serial Number", "Driver", "Passenger Assistant", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        deleteBTN.setText("Delete");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });

        editBTN.setText("Edit");
        editBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                        .addComponent(editBTN)
                        .addGap(18, 18, 18)
                        .addComponent(deleteBTN)
                        .addGap(18, 18, 18)
                        .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBTN)
                    .addComponent(editBTN))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         String searchText = searchTF.getText().trim();
        if (searchText.isEmpty()) {
            resetTable();
            return;
        }
        originalModel = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel filteredModel = new DefaultTableModel();
        for (int col = 0; col < originalModel.getColumnCount(); col++) {
            filteredModel.addColumn(originalModel.getColumnName(col));
        }
        for (int row = 0; row < originalModel.getRowCount(); row++) {
                boolean rowFound = false;
                for (int col = 0; col < originalModel.getColumnCount(); col++) {
                    String cellValue = originalModel.getValueAt(row, col).toString();
                    if (cellValue != null && cellValue.toLowerCase().contains(searchText.toLowerCase())) {
                        rowFound = true;
                        break;
                    }
                }
                if (rowFound) {
                    String[] rowData = new String[originalModel.getColumnCount()];
                    for (int col = 0; col < originalModel.getColumnCount(); col++) {
                        rowData[col] = originalModel.getValueAt(row, col).toString();
                    }
                filteredModel.addRow(rowData);
            }
        }
        jTable1.setModel(filteredModel);
        if (filteredModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No matching record found.", "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void searchTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTFKeyTyped
        // TODO add your handling code here:
        String searchText = searchTF.getText().trim();
        if (searchText.isEmpty()) {
            resetTable();
            return;
        }
        originalModel = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel filteredModel = new DefaultTableModel();
        for (int col = 0; col < originalModel.getColumnCount(); col++) {
            filteredModel.addColumn(originalModel.getColumnName(col));
        }
        for (int row = 0; row < originalModel.getRowCount(); row++) {
            boolean rowFound = false;
            for (int col = 0; col < originalModel.getColumnCount(); col++) {
                String cellValue = originalModel.getValueAt(row, col).toString();
                if (cellValue != null && cellValue.toLowerCase().contains(searchText.toLowerCase())) {
                    rowFound = true;
                    break;
                }
            }
            if (rowFound) {
                String[] rowData = new String[originalModel.getColumnCount()];
                for (int col = 0; col < originalModel.getColumnCount(); col++) {
                    rowData[col] = originalModel.getValueAt(row, col).toString();
                }
                filteredModel.addRow(rowData);
            }
        }
        jTable1.setModel(filteredModel);
    }//GEN-LAST:event_searchTFKeyTyped

    private void editBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBTNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editBTNActionPerformed

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTable1.getSelectedRow();
        if (selectedRowIndex != -1) {
            int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record?", "Delete", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.removeRow(selectedRowIndex);
                JOptionPane.showMessageDialog(this, "Record deleted successfully.", "Delete", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Delete", JOptionPane.WARNING_MESSAGE);
        }
        updateFile();
    }//GEN-LAST:event_deleteBTNActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteBTN;
    private javax.swing.JButton editBTN;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField searchTF;
    // End of variables declaration//GEN-END:variables
}
